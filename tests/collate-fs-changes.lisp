(defn test-collate (collate-test-dir)
	(let* ((collate-test-file0 (get-temp-file collate-test-dir))
		(collator (collate-fs-changes collate-test-dir))
		(collate-test-file1 (get-temp-file collate-test-dir))
		(changes (collator)))
	(test::assert-equal (make-vec) (hash-get changes :modified))
	(test::assert-equal (vec collate-test-file1) (hash-get changes :created))
	(test::assert-equal (make-vec) (hash-get changes :deleted))

	(let ((tst-file (open collate-test-file0 :create :truncate)))
			(write-string tst-file "boop")
			(flush tst-file)
			(close tst-file))
	(set! changes (collator))
	(test::assert-equal (vec collate-test-file0) (hash-get changes :modified))
	(test::assert-equal (make-vec) (hash-get changes :deleted))
	(test::assert-equal (make-vec) (hash-get changes :created))

	(fs-rm collate-test-dir)
	(set! changes (collator))
	(test::assert-equal (make-vec) (hash-get changes :created))
	(test::assert-equal (make-vec) (hash-get changes :modified))
	(let ((del-items (hash-get changes :deleted)))
		(test::assert-equal 3 (length del-items))
		(test::assert-includes collate-test-dir del-items)
		(test::assert-includes collate-test-file0 del-items)
		(test::assert-includes collate-test-file1 del-items))))

(with-temp (fn (tmp-dir)
	(let ((a-dir (get-temp tmp-dir)))
		(test-collate a-dir))))

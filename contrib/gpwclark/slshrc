;; This is a config file for people named price, you would put it in ~/.config/slsh/slshrc to use it.

(ns-import 'shell)
(ns-import 'iterator)

(def start-time (str (str-trim $(date +%s%N | cut -b1-13))))

;; gpwclark TODOs
;; put in docs about how you call doc on the cmd line all the time!!
;; - rewrite bash so we don't have gpl in here?
;; - track bkrd processes in PS1? could be helpful?
;; - string interpolation sytnax includes $my-var and ${my-var} as well as $(println foo)
;; - use this or make it: https://hg.stevelosh.com/t/

(def default-namespaces (collect-vec (filter (fn (x) (not (= x "user"))) (ns-list))))

;; bash-completions.lisp is located in `contrib/gpwclark`
;; (load "~/.config/sl-sh/bash-completions.lisp")

;; shell helpers {{{

    (defmacro rsynccp
        "sane defaults for treating rsync like copy.
        Section: user-shell"
        (src target)
        `$(rsync -av ,src ,target --progress --inplace --no-compress))

	(defn dsh
		"With no arguments: alias for du ./* -sh
		With any args: provides size of each provided argument
		Section: user-shell"
		(&rest paths)
		(if (= 0 (length paths))
			$(du ./* -sh | sort -h)
			(for path in paths $(du path -sh | sort -h))))

	(defn pgz
		"Parallelized gzip.
		cores:
			use lscpu to determine # of cores on box
		compression-ratio:
			- 1 fastest speed, worst compression
			- 9 slowest speed, most compression
			- default is 6

		Section: user-shell"
		(target-name cores compression-ratio &rest dirs)
			(out>
				target-name
				(|
					(eval (str "syscall tar cf - " (str-cat-list " " dirs)))
					(eval (str "syscall pigz  -p " cores  " -" compression-ratio)))))
	(defn dpgz
	"Parallelized un gzip.
	cores:
		use lscpu to determine # of cores on box
	Section: user-shell"
			(target-name cores)
				$(pigz --keep --decompress --processes cores target-name))

	(defn fullfp
	"Give me a relative filepath and I'll give you an absolute filepath!
	Section: user-shell"
		(filepath)
		$(find $PWD -name filepath))

	(defn mrf
		"most recent files. return ordered list (oldest -> newest) of files in current working dir
		Section: user-shell"
		()
		(str-split " " (str-trim (str $(/sbin/ls -at | tr "\n" " " | tr -s "[[:blank:]]")))))

	(defn lftail
		"Provide string to filter results of ls. Newest file that contains
		that string is then \"tail -f\"'d

		Section: user-shell"
		(str-to-tail-f) (do
		(var matching-list (filter (fn (x) (and (fs-file? x) (str-contains str-to-tail-f x))) (mrf)))
		(var tail-target (first (collect matching-list)))
		(tail -f tail-target)))

	(defn cdt
	"cd into the directory with the most recent timestamp
	Section: user-shell
	"
		(&rest args)
			(when (> (length args) 1 )
				(err "cdt supports zero or one arguments."))
			(var most-recent-dir
				(first (collect-vec (filter (fn (x) (and (if (= 1 (length args)) (str-contains (first args) (str x)) #t) (fs-dir? x) (not (= ".." x)) (not (= "." x)))) (mrf)))))
			(eval `(cd ,most-recent-dir)))


;; stdin to clipboard
(defmacro sc
	"pipe things into this and they'll be in your clipboard.
	Section: user-shell
	"
	()
	`$(xclip -selection c))

(defmacro this
	"
	put my pwd in my clipboard
	Section: user-shell
	"
	()
	`$(echo -n $((str-trim (str $(pwd)))) | sc))

(defn zh
	"
	fuzzy zsh history search
	Section: user-shell
	"
	()
	(do
		(var raw-zsh-str (str $(cat ~/.zsh_history | fzf-tmux)))
		(eval (str "(loose-symbols (" (str-cat-list ";" (rest (str-split ";" raw-zsh-str))) "))"))))

(defn stripcolor
	"remove all color codes from any strings
	Section: user-shell"
	(&rest args)
	(if (< (length args) 2)
		$(perl -pe "s/\e\[?.*?[\@-~]//g']" $((nth 0 ars)))
		(err "Only accepts 0 or 1 arguments")))

;; all find . -iname &rest
(defn ifind
	"pass in a string. list all files in vim whose filenames contain that string.
	Section: user-shell"
	(&rest args)
	(if (< (length args) 2)
		(| $(find $PWD -iname $((str (nth 0 args)))))
		(err "Only accepts 0 or 1 arguments")))

;;results feed into vim
(defn vimifind
	"pass a string. open all files in vim whose filenames contain that string.
	Section: user-shell"
	(&rest args)
	(if (< (length args) 2)
		(let
			((vimargs (str-split
				" "
				(str-trim (str (| $(find $PWD -iname $((nth 0 args))) $(tr "\n" " ")))))))
			(do
				(eval `(syscall vim ,@vimargs))))
		(err "Only accepts 0 or 1 arguments")))

;; }}}

;; java helpers {{{

;;gradle build
(defn g
	"gradle alias that writes all output to \"last_build.log\" and triggers a
	notification letting you know if the command succeeded or failed.

	Section: java"
	(&rest args)
	(let ((log-out-file "last_build.log"))
	(do
		(|
			(var gradle-proc (eval (append-to! (list "syscall" "./gradlew") args)))
			(tee log-out-file)
		)
		(var gradle-ret-code (wait gradle-proc))
		(var log-out-txt (str "Build log in " log-out-file "\n" (| $(cat $log-out-file) $(tail -n 2) $(head -n 2))))
		(var proj-name (str (basename $PWD)))
		(if (= 0 gradle-ret-code)
			(nss-pass (str "PASS! - " proj-name) log-out-txt)
			(nss-fail (str "FAIL! - " proj-name) log-out-txt))
		(= 0 gradle-ret-code))))

(defmacro javad
	"Start the jvm in debug mode, will hang until a debugger connects to jvm on port 5005
	Section: java"
	(&rest args)
		`$(java "-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005" ,@args))
;; }}}


;; custom env settings {{{

;; obviously...
	(export 'EDITOR "vim")

;; use vi keybindings on cli
	(hash-set! *repl-settings* :keybindings :vi)
	(hash-set! *repl-settings* :vi_esc_sequence '("jk" 200))
	(hash-set! *repl-settings* :vi-normal-prompt-prefix (str (bg-color-rgb 255 140 0)))
	(hash-set! *repl-settings* :vi-normal-prompt-suffix (str shell::*bg-default*))

;; syntax highlighting
	(syntax-on)

;; tweak token colors
	(set! tok-default-color shell::*fg-magenta*)
	(set! tok-sys-command-color shell::*fg-green*)
	(set! tok-string-color (fg-color-rgb 255 128 0))

;; you deserve all the information
	(error-stack-on)

;; you never know
	(hash-set! *repl-settings* :max-history 10000)

;; }}}


;; quality of shell life {{{

(alias dkc
"Typing out docker-compose takes forever.
Section: user-shell"
	$(docker-compose))

(alias :q
       ":q makes sense as an exit alias
       Section: user-shell"
       (exit))

(alias ls
	"alias ls to a colorified version.
	Section: user-shell"
	$(lsd))

;; betterer ls
(alias ll
	"ls -haltr shorcut
	Section: user-shell"
	$(lsd -haltr))

;; Replace cd with a version that also runs ls after.
;; Macro to let un-expanded args go to root::cd.
(defmacro cd
	"(= 'cd (do (cd) (ls))) ;; life changing
	Section: user-shell"
	(&rest args) (do
		(if (= (length args) 0)
			(and (root::cd) (ls .))
			(if (= (length args) 1)
				(and (root::cd (first args)) $(ls .))
				(err "I take zero or one argument.")))
		nil))
	;; use register-alias to have better syntax highlighting for cd.
	(register-alias 'cd)
;; }}}

;; quality of life {{{
	(defn spl
	"Give it a spelling of a word, it will tell you what words are spelled like it.
	Section: user-shell
	"
	(word)
		(println (str (| (echo (str word)) $(aspell -a)))))

(defn weather
	"print weather in terminal
	Section: user-shell"
		()
		$(curl "wttr.in"))
;; }}}

;; notification helpers {{{

(defmacro nss (title msg icon)
	`$(notify-send -t 0 ,title ,msg -i ,icon))

(defn persist-nss
	"provide persistent notification via notify-send and libnotify
	Section: notify"
	(title msg)
	(nss title msg "system-software-update"))

(defn nss-pass
	"provide persistent success notification via notify-send and libnotify
	Section: notify"
	(title msg)
	(nss title msg "face-wink"))

(defn nss-fail
	"provide persistent failure notification via notify-send and libnotify
	Section: notify"
	(title msg)
	(nss title msg "process-stop"))

(defn pnss
	"provide fun persistent notification via notify-send and libnotify
	Section: notify"
	(title)
	(persist-nss title (str (fortune))))

;;tell me about it!
(defn tmai
	"provide persistent notification of previous commands return code via notify-send and libnotify
	Section: notify"
	()
	(do
		(var last-ret-val *last-status*)
		(pnss (str "Last program exit status: " last-ret-val  "."))
		last-ret-val))

;; }}}

;; tmux aliases {{{

(defn tmuxls
	"list tmux sessions
	Section: tmux "
	()
	$(tmux list-sessions))

(defn tmuxnew
	"new named tmux session
	Section: tmux"
	()
	$(tmux new -s))

(defn tmuxkill
	"kill all tmux sessions
	Section: tmux"
	()
	$(tmux kill-session -t))

(defn tmuxopen
	"open existing named tmux session or create named session if it does not exist
	Section: tmux"
	(&rest args)
		(if (= (length args) 1)
			(do
				(var tmux-ret-code $(tmux a -t $((first args))))
				(if (= 0 tmux-ret-code)
					0
					$(tmuxnew $((first args)))))
			(err "Takes one argument, name of tmux session to create.")))

;; }}}

;; time helpers {{{

;; epoch in milliseconds
(defn epochms
	"epoch in milliseconds
	Section: time"
	()
	(str-trim $(date +%s%N | cut -b1-13)))

(defn datest
	"human readable eastern time zone
	Section: time"
	()
	(let-env ((TZ ":America/New_York"))
	 $(date)))

(defn fromepoch
	"
	takes epoch IN SECONDS and converts to nice date time
	Section: time"
	(time)
	$(date -d $((str "@" time))))

(defn timestamp
	"simple timestamp for use with naming
	Section: time"
	()
	$(date +%Y%m%d_%H%M%S))

;; }}}


;; prompt {{{

(defn get_pwd
	"pwd but replaces home with ~
	Section: prompt"
	()
	(str-cat-list "/" (str-split "/" (str-replace (str-trim $PWD) $HOME "~"))))

;;TODO maybe a version of this that strips out all non first/last char consononants
(defn path_list_trunc
	"take a path string abbreviates it
	Section: prompt"
	(plist)
		(if (> (length plist) 1)
			(if (> (length (first plist)) 0)
				(vec-insert! (path_list_trunc (rest plist)) 0 (str-sub 0 1 (first plist)))
				(path_list_trunc (rest plist)))
			plist))

(defn smaller_path
	"take a path string abbreviates it
	Section: prompt"
	(dir)
	(str-cat-list "/" (path_list_trunc (str-split "/" (str-replace (str-trim dir) $HOME "~")))))

(defn set_prompt_tail
	"used to grab return value of last command and put a non 0 error code in
	the prompt for greater visibility.
	Section: prompt"
	(last-status)
	(let* ((last-status-success (= 0 last-status))
		(prompt (if last-status-success
                      (str prompt-left prompt-cog prompt-right)
                      (str
                        shell::*fg-red*
                        "\u{03bb}\u{2e28}\u{2699}\u{2009}\u{2e29}\u{2009}\u{2192} "
                        shell::*fg-default*))))
      prompt))

(defn parse_git_branch
	"if in git repo, get the name of the branch
	Section: git"
	() (let ((branch))
	(err>null (set! branch (str $(git rev-parse --abbrev-ref HEAD))))
	(if (= branch "")
		(str "")
		(str "(" (str-trim branch) ")"))))

(defn get-build-type () (do
	(var build-type (nth 3 (str-split " " (version))))
	(if (= build-type "debug")
		(str " (" shell::*bg-red* build-type shell::*bg-default* ")")
		"")))

;; TODO maybe list bkrd processes as well in prompt.

(defn colorize-rand (string seed)
    (let* ((fg-color-vec (vec shell::*fg-default* shell::*fg-red*
                            shell::*fg-green* shell::*fg-yellow*
                            shell::*fg-blue* shell::*fg-magenta*
                            shell::*fg-cyan* shell::*fg-white*))
           (ascii-to-int (fn (ascii-char)
                        (str->int (str $(bash -c $((str "printf \"%d\" \'" ascii-char)))))))
           (color (vec-nth
                    fg-color-vec
                    (% (reduce (fn (curr nxt)
                                (+ curr (ascii-to-int nxt))) 0 seed)
                        (length fg-color-vec)))))
        (str color
            string
            shell::*fg-default*)))

(defn colorize-rand-cache (filename color-str seed)
    (let* ((dir (str (temp-dir) "/sl-sh/"))
          (fp (str dir filename)))
      (if (and (fs-exists? fp) (not (fs-dir? fp)))
        (str (str-trim $(cat $fp)))
        (do
          (var color-val (colorize-rand color-str seed))
          $(mkdir -p $dir)
          (out> fp $(echo $color-val))
          color-val))))

(def sl-sh-open-paren (colorize-rand-cache "sl-sh-open-paren" "[" (str $HOST "1")))
(def sl-sh-title (colorize-rand-cache "sl-sh-title" "sl-sh" (str $HOST "4")))
(def sl-sh-close-paren (colorize-rand-cache "sl-sh-close-paren"  "] " (str $HOST "1")))
(def open-paren (colorize-rand-cache "open-paren" "{[ " (str $HOST "7")))
(def host-string (colorize-rand-cache "host-string" $HOST $HOST))
(def close-paren (colorize-rand-cache "close-paren" " ]}" (str $HOST "7")))
(def prompt-left (colorize-rand-cache "prompt-left" "\u{03bb}\u{2e28}" (str $HOST "9")))
(def prompt-cog (colorize-rand-cache "prompt-cog" "\u{2699}\u{2009}" (str $HOST "4")))
(def prompt-right (colorize-rand-cache "prompt-right" "\u{2e29}\u{2009}\u{2192} " (str $HOST "9")))
;; "\u{03bb}\u{2e28}\u{2699}\u{2009}\u{2e29}\u{2009}\u{2192}"

;; prompt ensures
;;	1. always a new line above prompt
;;	2. if pushd has been used displays in reverse order dirs to popd
;;	3. current path
;;	4. if in git dir display current branch
;;	5. cursor on near empty line
(defn __prompt ()
    (do
        (var token-str (str-trim *last-command*))
        ;; TODO you can feed read a default argument
        ;; avoid wrap in get-error
        (var ret (get-error (read-all token-str)))
        (when (and
                (= :ok (car ret))
                (> (length token-str) 0)
                (not (empty-seq? token-str)))
            (do
                (set! token-str (collect (reverse (cdr ret))))
                (if (= (first token-str) '\$la)
                  (export 'la \$la)
                  (export 'la (str (first token-str))))
                (when (> (length token-str) 1)
                  (if (= (nth 1 token-str) '\$2la)
                    (export '2la \$2la)
                    (export '2la (str (nth 1 token-str)))))
                (when (> (length token-str) 2)
                  (if (= (nth 2 token-str) '\$3la)
                    (export '3la \$3la)
                    (export '3la (str (nth 2 token-str)))))))
        (var last-status *last-status*)
        (str
            "\n"
            (if (> (length (get-dirs)) 0)
                (collect-str (map smaller_path (reverse (get-dirs))))
                "")
            "\n\r" sl-sh-open-paren sl-sh-title (get-build-type) sl-sh-close-paren open-paren  host-string close-paren ": " shell::*fg-magenta* (str-trim (get_pwd)) "/ " shell::*fg-default* (parse_git_branch) "\n"
            (set_prompt_tail last-status))))

;; }}}

;; i'm fun {{{

(println "		Hey, hey, hey. Don't be mean.")
(println "		We don't have to be mean because,")
(println "		remember, no matter where you go,")
(println "		there you are.")
(println (str "			- Buckaroo Banzai (" (str-trim $(cat ~/.local/share/sl-sh/history | grep -v "<ctx>" | wc -l)) ")"))
(intern-stats)

;; }}}

;; machine specific {{{

    (def custom-lisp-config (str "~/.config/sl-sh/" (str-trim (str $(cat /etc/hostname))) ".lisp"))
    (if (fs-exists? custom-lisp-config)
        ((fn (result)
            (if (= :ok (car result))
                (cdr result)
                (cdr result)))
             (get-error (load custom-lisp-config)))
        (println (str shell::*fg-red* "Failed loading sl-sh config at " custom-lisp-config shell::*fg-default*)))

;; }}}


;; exec hook {{{

;; entrypoint for all 1 arg commands... used to make filepaths cd commands
;; to themselves.
(defn change-dir-if-arg-is-dir (cmd orig-cmd-ast)
	(let ((cmd-str (str cmd)))
		(if (fs-dir? cmd-str)
			(list root::cd cmd-str)
			orig-cmd-ast)))

(defn __exec-hook (cmd-str)
	(if (= (car (get-error (var cmd-ast (read-all cmd-str)))) :error)
	cmd-str
	(do
		(match (length cmd-ast)
		;; if string is of length 0 either nothing was typed or
		;; everything was a comment
		(0 cmd-ast)
		;; check to see if this single argument is a filepath
		(1 (change-dir-if-arg-is-dir (first cmd-ast) cmd-ast))
		;; check for infix notation
		(nil cmd-ast)))))

;; }}}

;; user ns docs {{{
(def api-page-name "mydoc_api.md")
(def api-page (str "pages/mydoc/" api-page-name))
(shell::pushd "/home/price/development/slsh/docs")
(def docs-error-ret
    (get-error (when (or
        (nil? (fs-exists? api-page))
        (= api-page (str-trim (str $(find $api-page -type f -mmin "+1440"))))) (do
    (load "docstrings-to-md.lisp")
    (load "mk-docs.lisp")
    (load "docstruct.lisp")
    (defn filter-non-user-forms (sym-list namespaces) (do
        (if (empty-seq? namespaces)
            sym-list
              (recur
                  (collect-vec (filter (fn (x) (do
                                (not (in? (ns-symbols (sym (first namespaces))) x))))
                      sym-list))
              (rest namespaces)))))

    (defn filter-user-undocable-forms (sym-list)
        (var to-filter (list 'custom-lisp-config 'filter-non-user-forms 'filter-user-undocable-forms 'list-of-user-slsh-syms '*repl-settings* '__completion_hook 'default-namespaces 'tok-invalid-color 'tok-default-color 'tok-string-color 'endfix-on 'config-file 'token-str 'all-non-user-namespaces 'build-type 'user-syms 'the-ns 'last-status '*ns-exports* '__line_handler '__exec_hook '__prompt 'tok-slsh-fcn-color 'possible-completions 'all-user-slsh-syms 'all-docstrings 'colorize-rand 'colorize-rand-cache 'smaller-path 'parse_git_branch 'sl-sh-open-paren 'sl-sh-title 'sl-sh-close-paren 'open-paren 'host-string 'close-paren 'api-page 'api-page-name))
          (filter (fn (x) (not (in? to-filter x))) sym-list))

    ;; TODO ideally this would live in mk-docs.lisp
    ;; and :user would be an option as param of mkdocs::get-doc-list-for
    (defn list-of-user-slsh-syms () (do
        (var user-syms (list))
        (var all-non-user-namespaces (append-to! (list) default-namespaces (list "mkdocs" "docparse" "docmd")))
        (for a-ns in (filter
                        (fn (x) (not (in? all-non-user-namespaces x)))
                        (ns-list))
            (append-to! user-syms (ns-symbols (sym a-ns))))
        (var user-forms (filter-non-user-forms user-syms default-namespaces))
        (var partial-docable-user-forms (mkdocs::filter-undocable-forms user-forms))
        (var all-docable-user-forms (filter-user-undocable-forms partial-docable-user-forms))
        (collect-vec all-docable-user-forms)))

    (def all-user-slsh-syms (list-of-user-slsh-syms))
    (def get-doc-pair (fn (x) (let ((result (get-error (doc (sym x)))))
                                  (if (= :ok (car result))
                                    (do
                                      (list sym (car result))
                                      (def new-result (car result))
                                      new-result)
                                    (println "Error: sym doc fail: " (cdr result))))))
    ;; check the last modified time of api-page-name and only do this if
    ;; has not been done in some amount of time.
    (def docs-by-section (make-hash))
    (for doc-struct in (map docstruct::make-doc-struct all-user-slsh-syms)
          (let ((section-key (doc-struct :section-key)))
            (if (hash-haskey docs-by-section section-key)
                (append-to! (hash-get docs-by-section section-key) doc-struct)
            (hash-set! docs-by-section section-key (list doc-struct)))))
    (docmd::make-md-file-with-sections api-page docs-by-section)
    (println "Built docs!")))))
(shell::popd)
(if (not (= (car docs-error-ret) :ok))
    (println "Failed to build docs: " (cdr docs-error-ret)))
(undef api-page-name)
(undef api-page)
(undef docs-error-ret)
;; }}}


;; cleanup symbols I might use {{{
(def end-time (str (user::epochms)))

(println "Load time: " (- (str->int end-time) (str->int start-time)) "ms")
(undef start-time)
(undef end-time)

;; }}

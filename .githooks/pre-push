#!/bin/bash

UNCATEGORIZED_FORMS_ERROR=5
SUCCESS=0

function log() {
	echo -e "\033[33;7m$1\033[0m $2"
}

function elog() {
	echo -e "\033[31;7m$1\033[0m $2"
}

function check_update_aur() {

	log "Check version to see if PKGBUILD should be updated"
	CURRENT_SL_SH_VERSION_DESC=$("../../target/release/sl-sh" -v)
	SL_SH_VERSION=$("../../target/release/sl-sh" -v | tr -s " " | cut -d " " -f 2)
	PKGBUILD_VERSION=$(cat PKGBUILD | grep -i pkgver= | cut -d "=" -f 2)
	echo "slsh versoin ${SL_SH_VERSION}"
	echo "pkgbuild version ${PKGBUILD_VERSION}"
	if [[ ${SL_SH_VERSION} = ${PKGBUILD_VERSION} ]]; then
		log "Packages versions"
		return ${SUCCESS}
	fi

	log "Push new PKGBUILD"

	rm -rf .git
	REPO=sl-sh-git
	rm -rf ${REPO}

	REMOTE="ssh://aur@aur.archlinux.org/${REPO}.git"
	git clone ${REMOTE}

	# handy trick to make sure all new changes are seen as updates... history
	# does matter here. can't erase like in docs case where we explicitly
	# do not want git history.
	mv ${REPO}/.git .
	sed -i "s/pkgver=${PKGBUILD_VERSION}/pkgver=${SL_SH_VERSION}/g" PKGBUILD

	# must update .SRCINFO or users won't be updated.
	makepkg --printsrcinfo > .SRCINFO
	rm -rf ${REPO}
	git config user.name $(git config --get user.name)
	git config user.email $(git config --get user.email)
	git add --all && git commit -m "${CURRENT_SL_SH_VERSION_DESC}"
	git push -u origin master

	rm -rf .git
	git add *
	git commit --amend --no-edit
	return ${SUCCESS}
}

function build_docs() {

	log "Build docs"
	../target/release/sl-sh docify.lisp index.markdown :lang
	if [[ $? != "0" ]]; then
		return ${UNCATEGORIZED_FORMS_ERROR};
	fi

	log "Push docs"

	REMOTE=$(git config --get remote.origin.url)

	rm -rf .git

	if [ ! -d ".git" ]; then
	   git init
	fi

	git checkout -b gh-pages

	git remote add origin ${REMOTE}
	git add --all && git commit -m "Build $(date)"
	git push -u -f origin gh-pages

	rm -rf .git

	popd
	return ${SUCCESS}
}

log "> Docs Hook started"

BRANCH_NAME=`git rev-parse --abbrev-ref HEAD`

if [[ ${BRANCH_NAME} != "master" && ${BRANCH_NAME} != "remotes/origin/master" ]]; then
	log "Not pushing master branch, not building docs or updating distributions."
	exit 0
fi

## TODO find git commands to list filenames of files that appear under
# git diff OR git dc...
# need to make sure nothing has been touched in the docs/ directory
#before a push?
pushd docs
if [[ $? != "0" ]]; then
	elog "docs dir not found, where are the docs? Aborting!"
	exit 1
fi

if [[ ! -z $(git diff --dirstat .) ]]; then
	elog "docs directory's working tree has been modified, please resolve"
	elog "said modifications and try again."
	exit 1
fi
popd

log "Verify we have an up to date release build to generate the docs with"

cargo build --release

pushd docs

build_docs

BUILD_DOCS_RET=$?
if [[ ${BUILD_DOCS_RET} != ${SUCCESS} ]]; then
	if [[ ${BUILD_DOCS_RET} = ${UNCATEGORIZED_FORMS_ERROR} ]]; then
		elog "Uncategorized forms found, not pushing. Please edit appropriate"
		elog "docstrings printed as hashmap literals above. Run"
		elog "$ cd docs && sl-sh docify.lisp index.markdown :lang to get started."
		popd
		exit 1
	else
		elog "Encountered unknown error when building docs!"
		popd
		exit 1
	fi
fi
popd

log "< Docs Hook finished"

log "> AUR Hook started"

pushd distribution/aur/
check_update_aur
AUR_RET=$?
if [[ ${AUR_RET} != ${SUCCESS} ]]; then
	elog "Encountered unknown error when building docs!"
	popd
	exit 1
fi
popd

log "< AUR Hook finished"

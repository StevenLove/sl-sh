#!/bin/bash

UNCATEGORIZED_FORMS_ERROR=5
SUCCESS=0

function log() {
	echo -e "\033[33;7m$1\033[0m $2"
}

function elog() {
	echo -e "\033[31;7m$1\033[0m $2"
}

function check_update_aur() {
	log "Push new PKGBUILD"

	rm -rf .git
	REPO=sl-sh-git
	rm -rf ${REPO}

	REMOTE="ssh://aur@aur.archlinux.org/${REPO}.git"
	git clone ${REMOTE}

	log "Check version to see if PKGBUILD should be updated"

	CURRENT_SL_SH_VERSION_DESC=$("../../target/release/sl-sh" -v)
	SL_SH_VERSION=$("../../target/release/sl-sh" -v | tr -s " " | cut -d " " -f 2)
	PKGBUILD_VERSION=$(cat ${REPO}/PKGBUILD | grep -i pkgver= | cut -d "=" -f 2)

	echo "slsh version ${SL_SH_VERSION}"
	echo "pkgbuild version ${PKGBUILD_VERSION}"
	if [[ ${SL_SH_VERSION} = ${PKGBUILD_VERSION} ]]; then
		log "sl-sh version not updated, not pushing to AUR."
		return ${SUCCESS}
	fi

	# handy trick to make sure all new changes are seen as updates.
	mv ${REPO}/.git .
	sed -i "s/pkgver=VERSION/pkgver=${SL_SH_VERSION}/g" PKGBUILD

	# must update .SRCINFO or users won't be updated.
	makepkg --printsrcinfo > .SRCINFO
	rm -rf ${REPO}

	git config user.name $(git config --get user.name)
	git config user.email $(git config --get user.email)

	git config --global user.email "aur@sl-sh.example.com"
	git config --global user.name "AUR CI"

	git add --all && git commit -m "${CURRENT_SL_SH_VERSION_DESC}"
	git push -u origin master

	rm -rf .git
	sed -i "s/pkgver=${SL_SH_VERSION}/pkgver=VERSION/g" PKGBUILD
	rm .SRCINFO

	return ${SUCCESS}
}

cargo build --release


log "> AUR Hook started"

pushd distribution/aur/
check_update_aur
AUR_RET=$?
if [[ ${AUR_RET} != ${SUCCESS} ]]; then
	elog "Encountered unknown error when building docs!"
	popd
	exit 1
fi
popd

log "< AUR Hook finished"
